#!/usr/bin/env python3
import argparse
import random
import string


def main():
    parser = argparse.ArgumentParser(description='Generate password using the XKCD method.')
    parser.add_argument('-w', '--words', type=int, default=4, help='include WORDS in the password')
    parser.add_argument('-c', '--caps', type=int, default=0, help='capitalize the first letter of CAPS of random words')
    parser.add_argument('-n', '--numbers', type=int, default=0, help='insert NUMBERS random numbers in the password ')
    parser.add_argument('-s', '--symbols', type=int, default=0, help='insert SYMBOLS random symbols in the password')

    args = parser.parse_args()

    with open("words.txt") as f:
        words = [word.strip() 
        for word in f.readlines()]

    password = generate_password(words, args.words)
    password = generate_caps(password, args.caps)
    password = generate_symbols(password, args.symbols)
    password = generate_numbers(password, args.numbers)
    print(password)


def generate_password(words, length):
    password = ""
    for i in range(length):
        password += random.choice(words).capitalize()
    return password


def generate_caps(password, num_caps):
    if num_caps > 0:
        for i in range(num_caps):
            index = random.randint(0, len(password) - 1)
            password = password[:index] + password[index].upper() + password[index+1:]
    return password


def generate_symbols(password, count):
    symbols = "~!@#$%^&*"
    if count > 0:
        for i in range(count):
            index = random.randint(0, len(password))
            symbol = random.choice(symbols)
            password = password[:index] + symbol + password[index:]
    return password


def generate_numbers(password, count):
    if count > 0:
        for i in range(count):
            index = random.randint(0, len(password))
            number = random.choice(string.digits)
            password = password[:index] + number + password[index:]
    return password


if __name__ == "__main__":
    main()
